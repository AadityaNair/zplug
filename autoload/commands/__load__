#!/usr/bin/env zsh
# Description:
#   Source installed plugins and add installed commands to $PATH

local    repo arg is_profile=false
local -a repos
local -A tags
local -F SECONDS

repos=( "${(k)zplugs[@]}" )

while (( $# > 0 ))
do
    arg="$1"
    case "$arg" in
        --verbose)
            zstyle ':zplug:core:load' verbose yes
            ;;
        --profile)
            __zplug::core::core::run_interfaces 'clear'
            is_profile=true
            ;;
        -*|--*)
            __zplug::core::options::unknown "$arg"
            return $status
            ;;
        "")
            # Invalid
            return 1
            ;;
        */*)
            repos+=( "${arg:gs:@::}" )
            ;;
        *)
            return 1
            ;;
    esac
    shift
done

# Check if cache is up-to-date
if __zplug::core::cache::load_if_available; then
    return 0
fi

__zplug::core::load::prepare

for repo in "${repos[@]}"
do
    # Generate cache for each as:type in parallel
    {
        __zplug::core::tags::parse "$repo"
        tags[as]="$(__zplug::core::core::run_interfaces 'as' "$repo")"

        case "$tags[as]" in
            "plugin")
                __zplug::core::cache::plugins "$repo"
                ;;
            "command")
                __zplug::core::cache::commands "$repo"
                ;;
            "theme")
                __zplug::core::cache::themes "$repo"
                ;;
            *)
                __zplug::io::print::f \
                    --die \
                    --zplug \
                    --func \
                    "as tag is invalid value (%s)\n" \
                    "$fg[green]$repo$reset_color"
                ;;
        esac
        if $is_profile; then
            __zplug::core::load::profile "$repo\t($SECONDS)"
        fi
    } &
done
wait

if $is_profile; then
    ${=PAGER:-less} "$_zplug_cache[profile]"
fi

__zplug::core::load::load
return $status
