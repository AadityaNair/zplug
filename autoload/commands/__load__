#!/bin/zsh

__import "print/print"
__import "zplug/cache"
__import "support/omz"

local    is_verbose=false is_debug=false
local    loaded_omz=false
local    arg key k f
local -A zspec
local    basename ext
local    src dst
local -a sources
local    ignore
local -A load_commands
local -a packages unsorted_nice nice_plugins
local -a load_plugins load_fpaths lazy_plugins
local -a ignore_patterns load_patterns
local -a themes_ext plugins_ext

while (( $# > 0 ))
do
    arg="$1"
    case "$arg" in
        --verbose)
            shift; is_verbose=true
            ;;
        --debug)
            shift; is_debug=true
            ;;
        -*|--*)
            __die "$arg: Unknown option\n"
            return 1
            ;;
    esac
done

# Use cache file
if __load_cache; then
    if $is_debug; then
        __put "$_ZPLUG_CACHE_FILE\n"
    fi
    return 0
fi

packages=(
    "${(k)zplugs[@]}"
)

# Order by nice value
for key in "${packages[@]}"
do
    zspec=( ${(@f)"$(__parser__ "$key")"} )
    unsorted_nice+=("$zspec[nice]:$zspec[name]")
done
unset key

for key in \
    ${${(OnM)unsorted_nice:#-*}#*:} \
    ${${(on)unsorted_nice:#-*}#*:}
do
    zspec=( ${(@f)"$(__parser__ "$key")"} )
    for k in ${(k)zspec}
    do
        if [[ $zspec[$k] == "-EMP-" ]]; then
            zspec[$k]=""
        fi
    done
    unset k

    {
        # FROM tag
        case $zspec[from] in
            "oh-my-zsh")
                if [[ ! -d $zspec[dir]:h ]]; then
                    continue
                fi
                ;;
            *)
                if [[ ! -d $zspec[dir] ]]; then
                    continue
                fi
        esac

        # IF tag
        if [[ -n $zspec[if] ]]; then
            if ! eval "$zspec[if]" &>/dev/null; then
                $is_verbose && __die "$zspec[name]: (not loaded)\n"
                continue
            fi
        fi

        # ON tag
        if [[ -n $zspec[on] ]]; then
            if [[ ! -d $ZPLUG_HOME/repos/${~zspec[on]} ]]; then
                $is_verbose && __die "$zspec[name]: (not loaded)\n"
                continue
            fi
        fi
    }

    # MAIN
    case $zspec[as] in
        "command")
            if [[ ! -d $ZPLUG_HOME/bin ]]; then
                mkdir -p "$ZPLUG_HOME/bin"
            fi

            basename="${zspec[name]:t}"
            zspec[dir]="${zspec[dir]%/}"
            dst=${${zspec[rename_to]:+$ZPLUG_HOME/bin/$zspec[rename_to]}:-"$ZPLUG_HOME/bin"}

            # Add parent directories to fpath if any files starting in _* exist
            load_fpaths+=(${zspec[dir]}{_*,/**/_*}(N-.:h))

            # Mock (example): "b4b4r07/sample"
            # sample
            # |-- bin
            # |   |-- sample
            # |   `-- mycmd1
            # `-- mycmd2
            #
            # 1 directory, 2 files
            #
            if [[ -f $zspec[dir]${zspec[use]:+"/$zspec[use]"} ]]; then
                # case:
                #   zplug "b4b4r07/sample", use:mycmd
                load_commands+=(
                    # expand to "$ZPLUG_HOME/repos/b4b4r07/sample/mycmd"
                    "$zspec[dir]${zspec[use]:+"/$zspec[use]"}"
                    "$dst"
                )
            elif [[ -f $zspec[dir]${zspec[use]:+"/$zspec[use]"}/$basename ]]; then
                # case:
                #   zplug "b4b4r07/sample", use:bin
                load_commands+=(
                    # expand to "$ZPLUG_HOME/repos/b4b4r07/sample/bin/sample"
                    "$zspec[dir]${zspec[use]:+"/$zspec[use]"}/$basename"
                    "$dst"
                )
            elif [[ -f $zspec[dir]/$basename ]]; then
                # case:
                #   zplug "b4b4r07/sample"
                load_commands+=(
                    # expand to "$ZPLUG_HOME/repos/b4b4r07/sample/sample"
                    "$zspec[dir]/$basename"
                    "$dst"
                )
            else
                # For brace
                # case 1:
                #   zplug "b4b4r07/sample", use:"bin/{mycmd1,sample}"
                # case 2:
                #   zplug "b4b4r07/sample", use:"bin/*"
                sources=(
                    # expand to "$ZPLUG_HOME/repos/b4b4r07/sample/mycmd1"
                    #           "$ZPLUG_HOME/repos/b4b4r07/sample/sample"
                    ${(@f)"$(zsh -c "echo ${zspec[dir]}/${zspec[use]}" 2>/dev/null)"}
                )
                for src in "${sources[@]}"
                do
                    load_commands+=("$src" "$dst")
                done
            fi
            ;;

        "plugin")
            if [[ $zspec[from] == "oh-my-zsh" ]]; then
                load_patterns=()
                # Themes' extensions for Oh-My-Zsh
                themes_ext=("zsh-theme" "theme-zsh")

                # Check if omz is loaded and set some necessary settings
                load_omz() {
                    if ! $loaded_omz; then
                        loaded_omz=true
                        export ZSH="$ZPLUG_HOME/repos/$_ZPLUG_OHMYZSH"
                        # Insert to the top of load_plugins
                        # load_plugins=(
                        #     "$ZSH/oh-my-zsh.sh"
                        #     "${load_plugins[@]}"
                        # )
                        if [[ $zspec[name] =~ ^lib ]]; then
                            __omz_themes
                        fi
                    fi
                }

                case $zspec[name] in
                    plugins/*)
                        # TODO: use tag
                        load_patterns=(
                            ${(@f)"$(__omz_depends "$zspec[name]")"}
                            "$zspec[dir]"/*.plugin.zsh(N-.)
                        )
                        ;;
                    themes/*)
                        # TODO: use tag
                        load_patterns=(
                            ${(@f)"$(__omz_depends "$zspec[name]")"}
                            "$zspec[dir]".${^themes_ext}(N-.)
                        )
                        ;;
                    lib/*)
                        load_patterns=(
                            "$zspec[dir]"${~zspec[use]}
                        )
                        ;;
                esac
                load_fpaths+=(
                    ${zspec[dir]}/{_*,**/_*}(N-.:h)
                )

                if (( $#load_patterns > 0 )); then
                    # nice plugin or not
                    if (( $zspec[nice] > 9 )); then
                        nice_plugins+=( "${load_patterns[@]}" )
                    else
                        load_plugins+=( "${load_patterns[@]}" )
                    fi
                    load_omz
                fi
                # Remove these function from current shell process
                unfunction load_omz

            else
                # NOT oh-my-zsh
                load_patterns=()
                plugins_ext=("plugin.zsh")

                # In order to find main file of the plugin,
                # narrow down the candidates in three stages
                # 1. use $plugins_ext[@] ==> foo.plugin.zsh
                # 2. use $zspec[use] as a file like "*.zsh" ==> bar.zsh
                # 3. use in combination
                #    - zspec[use] as a directory like "bin"
                #    - and *.zsh files ==> bar.zsh
                for ext in "${plugins_ext[@]}"
                do
                    # NOTE: step 1
                    load_patterns+=( "$zspec[dir]"/*.$ext(N-.) )
                    if (( $#load_patterns == 0 )); then
                        # NOTE: step 2
                        # If $zspec[use] is a regular file,
                        # expect to expand to $zspec[dir]/*.zsh
                        load_patterns+=( "$zspec[dir]"/${~zspec[use]}(N.) )
                        if (( $#load_patterns == 0 )); then
                            # For brace
                            load_patterns+=( ${(@f)"$(zsh -c "echo $zspec[dir]/$zspec[use](N.)" 2>/dev/null)"} )
                        fi
                        # Add the parent directory to fpath
                        load_fpaths+=( $zspec[dir]/_*(N.:h) )

                        # NOTE: step 3
                        # If $zspec[use] is a directory,
                        # expect to expand to $zspec[dir]/*.zsh
                        if (( $#load_patterns == 0 )); then
                            load_patterns+=( "$zspec[dir]/$zspec[use]"/*.zsh(N.) )
                            if (( $#load_patterns == 0 )); then
                                # For brace
                                load_patterns+=( ${(@f)"$(zsh -c "echo $zspec[dir]/$zspec[use]/*.zsh(N.)" 2>/dev/null)"} )
                            fi
                            # Add the parent directory to fpath
                            load_fpaths+=( $zspec[dir]/$zspec[use]/_*(N.:h) )

                            # If that is an autoload plugin
                            if (( $zspec[lazy] == 1 )); then
                                load_patterns+=( "$zspec[dir]/autoload"/*(N.) )
                                load_fpaths+=( "$zspec[dir]/autoload"(N/) )
                            fi
                        fi
                    fi
                done

                if (( $zspec[nice] > 9 )); then
                    # the order of loading of plugin files
                    nice_plugins+=( "${load_patterns[@]}" )
                else
                    # autoload plugin / regular plugin
                    if (( $zspec[lazy] == 1 )); then
                        lazy_plugins+=( "${load_patterns[@]}" )
                    else
                        load_plugins+=( "${load_patterns[@]}" )
                    fi
                fi
            fi
            ;;

        *)
            __die "$zspec[as]: as tag must be command or plugin\n"
            return 1
            ;;
    esac

    if [[ -n $zspec[ignore] ]]; then
        # Make ignore patterns
        if [[ $zspec[from] == "oh-my-zsh" ]]; then
            ignore_patterns=( "$ZPLUG_HOME/repos/$_ZPLUG_OHMYZSH"/${~zspec[ignore]}(N) )
        else
            ignore_patterns=( "$zspec[dir]"/${~zspec[ignore]}(N) )
        fi

        for ignore in "${ignore_patterns[@]}"
        do
            # Commands
            if [[ -n $load_commands[(i)$ignore] ]]; then
                unset "load_commands[$ignore]"
            fi
            # Plugins
            load_plugins=( "${(R)load_plugins[@]:#$ignore}" )
            nice_plugins=( "${(R)nice_plugins[@]:#$ignore}" )
            lazy_plugins=( "${(R)lazy_plugins[@]:#$ignore}" )
            # fpath
            load_fpaths=( "${(R)load_fpaths[@]:#$ignore}" )
        done
    fi
done

# Commands
{
    for f in "${(k)load_commands[@]}"
    do
        if [[ -f $f ]]; then
            ln -snf "$f" "$load_commands[$f]"
        fi
    done
    path=(
        "$ZPLUG_HOME/bin"
        "${path[@]}"
    )
    typeset -gx -U path
}

# Plugins
{
    for f in "${load_plugins[@]}"
    do
        if [[ -f $f ]]; then
            if $is_debug; then
                echo "$f"
            else
                source "$f"
                if (( $status == 0 )) && $is_verbose; then
                    __put "$fg[green]  Loaded$reset_color ${f#$ZPLUG_HOME/repos/}\n"
                fi
                if (( $themes_ext[(I)${f:e}] )); then
                    __omz_themes
                fi
            fi
        fi
    done

    # NOTE: set fpath before compinit
    if $is_debug; then
        echo ${(F)${(u)load_fpaths[@]}}
    else
        fpath=(
            "${(u)load_fpaths[@]}"
            "${fpath[@]}"
        )
        compinit -C -d "$ZPLUG_HOME/zcompdump"
    fi

    for f in "${nice_plugins[@]}"
    do
        if [[ -f $f ]]; then
            if $is_debug; then
                echo "$f"
            else
                source "$f"
                if (( $status == 0 )) && $is_verbose; then
                    __put "$fg[green]  Loaded$reset_color ${f#$ZPLUG_HOME/repos/}"
                    __put "$fg[yellow] after compinit$reset_color\n"
                fi
            fi
        fi
    done
}

# Plugins (Lazy)
{
    for f in "${lazy_plugins[@]}"
    do
        autoload -Uz "${f:t}"
    done
}
unset f

# Cache
__update_cache
