#!/bin/zsh
#              _
#    _____ __ | |_   _  __ _
#   |_  / '_ \| | | | |/ _` |
#    / /| |_) | | |_| | (_| |
#   /___| .__/|_|\__,_|\__, |
#       |_|            |___/
#
#  zplug: zsh plugin manager
# ===========================
#
# zplug is next-generation zsh plugin manager.
# zplug can manage everything and can do not only plugins
# but also commands and binaries.
#
# Pros.
#
# - Manage everything
# - Super-fast parallel installation/update
# - Branch/tag/commit support
# - Can manage UNIX commands (what language is okay)
# - Post-update hooks
# - Support for externally managed plugins (oh-my-zsh?)
# - Can manage binaries (e.g., GitHub Releases)
# - Creates shallow clones to minimize disk space usage and download time
# - Understand dependencies between plugins
#
# Download zplug and put it in ~/.zplug
#
#   curl -fLo ~/.zplug/zplug --create-dirs git.io/zplug
#
# Edit your .zshrc
#
: <<'EXAMPLE'
source ~/.zplug/zplug

# Make sure you use double quotes
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-history-substring-search"

# Can manage plugin as command
zplug "junegunn/dotfiles", as:cmd, of:bin/vimcat
# Manage everything e.g. zshrc (alias)
zplug "tcnksm/docker-alias", of:zshrc
# Prohibit updating by using frozen
zplug "k4rthik/git-cal", as:cmd, frozen:1

# Grab binaries (from GitHub Releases)
zplug "junegunn/fzf-bin", \
    as:cmd, \
    from:gh-r, \
    file:fzf

# Run command after installed
zplug "tj/n", do:"make install"

# Support branch/tag/commit
zplug "b4b4r07/enhancd", at:v1
zplug "mollifier/anyframe", commit:4c23cb60

# Install if `if` specifier returns true
zplug "hchbaw/opp.zsh", if:"(( ${ZSH_VERSION%%.*} < 5 ))"

# Gist can be used (only full URL)
zplug "https://gist.github.com/b4b4r07/79ee61f7c140c63d2786", \
    as:cmd, \
    of:get_last_pane_path.sh

# Group dependencies, emoji-cli depends on jq
zplug "stedolan/jq", \
    as:cmd, \
    file:jq, \
    from:gh-r \
    | zplug "b4b4r07/emoji-cli"

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load

EXAMPLE
#
# Then reload .zshrc and `zplug install; zplug load` to install plugins.
# Visit https://github.com/b4b4r07/zplug for more information.
#
# The MIT License (MIT)
# Copyright (c) 2015 Masaki Ishiyama <b4b4r07@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# Environment variable (Read-Only)
typeset -gr ZPLUG_NAME="zplug"
typeset -gr ZPLUG_VERSION="0.1.9"
typeset -gr ZPLUG_RAWURL="https://git.io/zplug"
typeset -gr ZPLUG_URL="https://github.com/b4b4r07/zplug"

# Set default value if not present
typeset -gx ZPLUG_HOME=${ZPLUG_HOME:-~/.zplug}
typeset -gx ZPLUG_THREADS=${ZPLUG_THREADS:-16}
typeset -gx ZPLUG_SHALLOW=${ZPLUG_SHALLOW:-true}
typeset -gx ZPLUG_PROTOCOL=${ZPLUG_PROTOCOL:-HTTPS}

# Global variable
typeset -g -A zplugs

typeset -gr ZPLUG_HELP="usage: zplug [COMMANDS] [OPTIONS]
  $ZPLUG_NAME is next-generation zsh plugin manager

COMMANDS:
  help      Show this help message and usage
  version   Show version information
  install   Install described items in parallel
  update    Update items in parallel
  load      Source plugins to current shell and add $ZPLUG_HOME/bin to \$PATH
  list      Show all of the zplugs in the current shell
  check     Check whether an update or installation is available
  status    Check if remote branch is up-to-date

For more information, see also $ZPLUG_URL."

#
# zplug utilities
#

__die() {
    command printf -- "$@" >&2
}

__put() {
    command printf -- "$@"
}

git_version() {
    echo ${${(A)"$(git --version)"}[3]//./}
}

bg_rotation_bar() {
    local current_count simbol
    for ((current_count=0; ; current_count++))
    do
        let simbol=current_count%4
        case "$simbol" in
            0) echo -ne " |\r";;
            1) echo -ne " /\r";;
            2) echo -ne " -\r";;
            3) echo -ne " \\\\\r";;
        esac
        sleep 0.05s
    done
}

__zplug::list()
{
    # Check if zplugs has one more elements
    if (( $#zplugs < 1 )); then
        __die "$ZPLUG_NAME: there is no available plugins\n"
        return 1
    fi

    local v
    local -A out

    # Reset zplugs elements
    for v in "${(@nO)zplugs}"
    do
        out+=("${(@kv)zplugs[(eR)$v]}")
    done

    # Output and colorize
    __put '%-20s  =>  %s\n' "${(@kv)out}" \
        | sed -e 's/-EMP-/""/g' \
        | perl -pe 's/^(.*)( *=>.*)$/\033[32m$1\033[m$2/g' \
        | perl -pe 's/(as|of|from|to|if|dir|file|at|do|frozen|on|commit)(:)/\033[34m$1\033[m$2/g'
}

__zplug::self_update()
{
    trap 'kill -9 $bg_pid &>/dev/null; set -m; trap - EXIT INT' EXIT INT
    local zplug
    zplug="b4b4r07/zplug"

    __put "\033[;1m * zplug self manegement\033[m\n"
    zplug check "$zplug" || zplug "$zplug"
    if [[ -d $ZPLUG_HOME/repos/b4b4r07/zplug ]]; then
        __zplug::update "$zplug"
    else
        ZPLUG_SHALLOW=false __zplug::install "$zplug"
    fi

    ln -snf "$ZPLUG_HOME/repos/$zplug/zplug" "$ZPLUG_HOME/zplug"
    if [[ $status -eq 0 ]]; then
        __put "\033[32mUpdated $ZPLUG_NAME \033[;1m($ZPLUG_HOME/zplug)\033[m\n"
    else
        __die "\033[31mError occured (see $ZPLUG_URL)\033[m\n"
        return 1
    fi
}

__zplug::update()
{
    # Process arguments
    case "$1" in
        --self)
            __zplug::self_update
            return $status
            ;;
    esac

    # Disable job control
    set +m

    local line cnt=0

    for line in "$@"; do
        # Run installation in subprocess
        {
            trap 'kill -9 ${${(v)jobstates##*:*:}%=*} $bg_pid &>/dev/null; set -m; trap - INT' INT

            local k bg_pid ret=1

            # All variables are treated as local variable
            # because of background job (subprocess)
            local -A zspec
            zspec=( ${(@f)"$(__zplug::parser "$line")"} )
            for k in ${(k)zspec}
            do
                # Replace -EMP- with "" empty
                if [[ $zspec[$k] == "-EMP-" ]]; then
                    zspec[$k]=""
                fi
            done

            # Reset timer
            typeset -F SECONDS=0

            # Not update
            if [[ $zspec[frozen] -eq 1 ]]; then
                if [[ ${#@} -eq 1 && ${@[1]} == $zspec[name] ]]; then
                    __put "$zspec[name]: \033[34mfrozen repo\033[m. Update? [y/N]: "
                    if ! read -q; then
                        continue
                    fi
                    echo
                else
                    # Frozen!!
                    __put " \033[34m* Frozen\033[m    $line\n"
                    continue
                fi
            fi

            __put "Updating...  $line\n"

            # Start the spin of drawing
            # and save process id
            bg_rotation_bar & bg_pid=$!

            () {
                # Change directory to fullpath of zspec dir
                # or parent directory of zspec dir
                # If it fails, return this unnamed function with error code 2
                builtin cd $zspec[dir] || builtin cd ${zspec[dir]%/*} || return 2

                # If zspec from is gh-r (GitHub Releases),
                # send a http request to git.io/releases with os argument
                # or, git pull (case of normal plugin)
                if [[ $zspec[from] == "gh-r" ]]; then
                    eval 'L=$zspec[name] bash -c "$(curl -L git.io/releases) || false" -s os' >/dev/null 2>&1
                else
                    git pull --quiet
                fi || return 1
            } >/dev/null 2>&1
            # Return code of above unnamed function
            # Incidentally,
            # nothing is output even if it success or fails
            ret=$status

            # Force-quit background process (bg_rotation_bar)
            kill -9 $bg_pid &>/dev/null

            # It will be conditional branching with exit code
            # 0: success, 1: failure, 2: not found repository
            case $ret in
                0)
                    # Output in green
                    __put "\033[32mUpdated!\033[m     %-20s\t(%.2fs)\n" "$line" $SECONDS
                    ;;
                1)
                    # Output in red
                    __put "\033[31mNot Updated\033[m  %-20s\t(%.2fs)\n" "$line" $SECONDS
                    ;;
                2)
                    # Simple manual synchronous processing
                    sleep 1
                    # Output in magenta
                    # and SECONDS-1 (sleep 1)
                    __put "\033[35mNot Found\033[m    %-20s\t(%.2fs)\n" "$line" $((SECONDS-1))
                    ;;
            esac
        } &

        # Prevent having too many subprocesses
        (( (cnt += 1) % ZPLUG_THREADS == 0 )) && wait
    done

    # Wait until all jobs known to the invoking shell have terminated
    wait

    # Enable job control
    set -m
}

__zplug::install()
{
    local cnt line fail job
    local start end
    local is_verbose=false
    cnt=0

    # Create direcotry
    [[ -d $ZPLUG_HOME/repos ]] || mkdir -p "$ZPLUG_HOME/repos"
    # Return with exit code 0 if no argument is given
    [[ -n $1 ]] || return 0

    # Process arguments
    case "$1" in
        --verbose)
            is_verbose=true
            shift
            ;;
    esac

    # Disable job control
    set +m

    # Recode start-up time
    typeset -F SECONDS=0
    start=$SECONDS

    for line in "$@"; do
        # Skip installed items
        [[ -e $ZPLUG_HOME/repos/$line ]] &&
            {
                if $is_verbose; then
                    # Output in red
                    __put "\033[31m-\033[m \033[32m${line}\033[m: already installed\n"
                fi
                continue
            }

        # Run installation in subprocess
        {
            trap 'kill -9 ${${(v)jobstates##*:*:}%=*} $bg_pid &>/dev/null; set -m; trap - INT' INT

            local bg_pid ret

            # All variables are treated as local variable
            # because of background job (subprocess)
            local -A zspec
            zspec=( ${(@f)"$(__zplug::parser "$line")"} )
            for k in ${(k)zspec}
            do
                # Replace -EMP- with "" empty
                if [[ $zspec[$k] == "-EMP-" ]]; then
                    zspec[$k]=""
                fi
            done

            # Reset timer
            typeset -F SECONDS=0

            __put "Installing...  $line\n"

            # Start the spin of drawing
            # and save process id
            bg_rotation_bar & bg_pid=$!
            builtin cd $ZPLUG_HOME/repos >/dev/null 2>&1

            # If zspec from is gh-r (GitHub Releases),
            # send a http request to git.io/releases with os argument
            # or, git clone (case of normal plugin)
            if [[ $zspec[from] == "gh-r" ]]; then
                # Create directory (reponame)
                [[ -d ${zspec[name]%/*} ]] || mkdir -p "${zspec[name]%/*}"
                # Change directory to it
                builtin cd "${zspec[name]%/*}" >/dev/null 2>&1
                eval 'L=$zspec[name] bash -c "$(curl -L git.io/releases) || false" -s os' >/dev/null 2>&1
                ret=${ret:-$status}

            else
                # Run git clone
                if [[ $line =~ ^gist\.github\.com ]]; then
                    __zplug::gist_clone "$line"
                else

                local url_format
                # Create the format of URL used to git clone
                # When vim-plug clones a repository, it injects git::@ into the URL
                # It's a little hack to avoid username/password prompt
                # from git when the repository doesn't exist.
                # Such thing can happen when there's a typo in the argument,
                # or when the repository is removed from GitHub
                # For more information, see also vim-plug wiki.
                if [[ $ZPLUG_PROTOCOL =~ ^(HTTPS|https)$ ]]; then
                    # HTTPS: "https://git::@github.com/%s.git"
                    url_format="https://git::@github.com/${line}.git"

                    # However, Git 2.3.0 introduced $GIT_TERMINAL_PROMPT
                    # which can be used to suppress user prompt
                    if (( $(git_version) > 230 )); then
                        # HTTPS (git 2.3+): "https://github.com/%s.git"
                        GIT_TERMINAL_PROMPT=0
                        url_format="https://github.com/${line}.git"
                    fi

                elif [[ $ZPLUG_PROTOCOL =~ ^(SSH|ssh)$ ]]; then
                    # SSH: "git@github.com:%s.git"
                    url_format="git@github.com:${line}.git"

                else
                    # OTHER: not supported
                    __die "\033[31m x Failed      $line\033[m (use SSH/HTTPS for cloning protocol)\n"
                    # Save exit code 2 to ret
                    ret=${ret:-2}
                fi

                # Shallow clone
                # What's shallow clone?
                # It's the repository consists of only 1 recent commit
                # If zspec[commit] is not empty, do normal clone automatically
                local shallow_clone
                if $ZPLUG_SHALLOW && (( $#zspec[commit] >= 8 )); then
                    shallow_clone="--depth=1"
                fi

                # If exit code is true,
                # run git clone
                [[ $ret -eq 0 ]] &&
                    git clone $shallow_clone \
                    --recursive \
                    --quiet \
                    --branch $zspec[at] \
                    "$url_format" "$line" >/dev/null 2>&1
                ret=${ret:-$status}

                # Not shallow clone
                if (( $#zspec[commit] >= 8 )); then
                    builtin cd "$line" && git checkout $zspec[commit] >/dev/null 2>&1
                fi
                fi
            fi

            # If not empty
            if [[ -n $zspec[do] ]]; then
                if [[ $ret -eq 0 ]]; then
                    # Run command if git clone returns true
                    eval "$zspec[do]"
                fi
            fi

            # Force-quit background process (bg_rotation_bar)
            kill -9 $bg_pid &>/dev/null

            # Whether to success or not
            if [[ $ret -eq 0 ]]; then
                # Output in green
                __put "\033[32mInstalled!\033[m     %-20s\t(%.2fs)\n" "$line" $SECONDS
            elif [[ $ret -eq 1 ]]; then
                # Output in red
                __put "\033[31mNot Installed\033[m  %-20s\t(%.2fs)\n" "$line" $SECONDS
                # Return false (by false command) instead of return 1
                false
            else
                false
            fi
        } &

        # Prevent having too many subprocesses
        (( (cnt += 1) % ZPLUG_THREADS == 0 )) && wait
    done

    # Count failure
    fail=0

    # Pauses until execution of a background process has ended
    for job in ${${(v)jobstates##*:*:}%=*}
    do
        wait $job || let fail++
    done >/dev/null 2>&1

    # Wait until all jobs known to the invoking shell have terminated
    wait

    # Enable job control
    set -m

    # Skip footer prints,
    # if cnt is zero (case: no argument is given)
    if [[ $cnt -eq 0 ]]; then
        return 0
    fi

    # Footer prints
    if [[ $fail -eq 0 ]]; then
        # Output in green
        __put "\033[;1m ==> Installed all plugins to $ZPLUG_HOME/repos, successfully!\033[m\n"
    else
        # Output in red
        __die "\033[31;1m ==> Installed to $ZPLUG_HOME/repos but failed.\033[m\n"
    fi

    # Recode finish time
    end=$SECONDS

    # Output time it took to process
    __put "$ZPLUG_NAME: total wall-time %f sec.\n" $(($end - $start))

    return $fail
}

__zplug::parser()
{
    local arg parsed_zplugs
    arg="$1"
    arg="${arg},${zplugs[$arg]%,}"

    # Separated by commas
    parsed_zplugs=(${(s:,:)arg})

    # Add spec variable
    # If value is empty, set -EMP- value to it
    local name as of to from if dir file at do frozen on commit
    name="${parsed_zplugs[1]}"
    as=${${${(M)parsed_zplugs:#as*}#*:}:-src}
    of=${${${(M)parsed_zplugs:#of*}#*:}:--EMP-}
    to=${${${(M)parsed_zplugs:#to*}#*:}:--EMP-}
    from=${${${(M)parsed_zplugs:#from*}#*:}:--EMP-}
    if=${${${(M)parsed_zplugs:#if*}#*:}:--EMP-}
    dir=${${${(M)parsed_zplugs:#dir*}#*:}:--EMP-}
    file=${${${(M)parsed_zplugs:#file*}#*:}:--EMP-}
    at=${${${(M)parsed_zplugs:#at*}#*:}:-master}
    do=${${${(M)parsed_zplugs:#do*}#*:}:--EMP-}
    frozen=${${${(M)parsed_zplugs:#frozen*}#*:}:-0}
    on=${${${(M)parsed_zplugs:#on*}#*:}:--EMP-}
    commit=${${${(M)parsed_zplugs:#commit*}#*:}:--EMP-}

    local -A zplugs_specifiers
    zplugs_specifiers=(
      name    "$name"
      as      "$as"
      of      "$of"
      to      "$to"
      from    "$from"
      if      "$if"
      dir     "$dir"
      file    "$file"
      at      "$at"
      do      "$do"
      frozen  "$frozen"
      on      "$on"
      commit  "$commit"
    )

    # Output zplugs_specifiers
    # Separated by newline
    # because it is used by parameter expansion flags (@f)
    local key
    for key in ${(k)zplugs_specifiers}
    do
        echo "$key"
        echo "$zplugs_specifiers[$key]"
    done
}

__zplug::load()
{
    local f files k
    local key
    local -A zspec

    for key in ${(k)zplugs}
    do
        zspec=( ${(@f)"$(__zplug::parser "$key")"} )
        for k in ${(k)zspec}
        do
            # Replace -EMP- with "" empty
            if [[ $zspec[$k] == "-EMP-" ]]; then
                zspec[$k]=""
            fi
        done


        # if specifier
        if [[ -n $zspec[if] ]]; then
            if ! eval '$zspec[if]' >/dev/null 2>&1; then
                __die "$zspec[name]: (not load)\n"
                continue
            fi
        fi

        # on specifier
        if [[ -n $zspec[on] ]]; then
            if ! [[ -e $ZPLUG_HOME/repos/$zspec[on] ]]; then
                __die "$zspec[name]: (not load)\n"
                continue
            fi
        fi

        # as specifier
        # Conditional branching by as
        case $zspec[as] in
            cmd)
                # Hold files to be read in files variable
                files=()
                # Create bin directory to export
                [[ -d $ZPLUG_HOME/bin ]] || mkdir -p $ZPLUG_HOME/bin

                # Taking every imaginable locations into accounts,
                # to find the command file or binary file
                #
                if [[ -f $zspec[dir]/${zspec[name]#*/} ]]; then
                    # fullpath and filename
                    files=("$zspec[dir]/${zspec[name]#*/}")

                elif [[ -f $zspec[dir]/$zspec[of] ]]; then
                    # fullpath and of specifier
                    files+=("$zspec[dir]/$zspec[of]")

                elif [[ -f $zspec[dir]/$zspec[of]/${zspec[name]#*/} ]]; then
                    # fullpath and of specifier and filename
                    files+=("$zspec[dir]/$zspec[of]/${zspec[name]#*/}")

                elif [[ -f $zspec[dir] ]]; then
                    # fullpath
                    files+=("$zspec[dir]")
                fi

                # Disable job control
                set +m

                # Make symlink to $ZPLUG_HOME/bin in parallel
                for f in "${files[@]}"
                do
                    {
                        # local pat
                        # pat="^($(git branch | cut -c3- | paste -s -d"|" -))$"
                        # if [[ ! $zspec[at] =~ $pat ]]; then
                        #     builtin cd $zspec[dir]
                        #     git checkout $zspec[at]
                        # fi
                        builtin cd $ZPLUG_HOME/bin

                        # Rename by using file specifier
                        ln -snf "$f" ${zspec[file]:-.}
                    } >/dev/null 2>&1 &
                done

                # Wait until all jobs known to the invoking shell have terminated
                wait

                # Enable job control
                set -m

                # Export ZPLUG_HOME/bin
                path=("$ZPLUG_HOME/bin" $path)
                # Unique path
                typeset -gx -U path
                ;;

            src)
                # To find files to be sourced and
                # expand the wildcard (using zsh -c "foo*bar")
                files=( $(zsh -c "echo $zspec[dir]/${zspec[of]:-*.zsh(N)}" 2>/dev/null) )

                for f in "${files[@]}"
                do
                    if [[ -f $f ]]; then
                        source "$f"
                    else
                        # case of removing project repository
                        :
                    fi
                done
                ;;
        esac
    done
}

# WIP
__zplug::validator()
{
    local line k fail=0
    local -A zspec

    # Do not run in parallel this for loop
    # bacause it is cannot increment fail variable
    for line in ${(k)zplugs}
    do
        zspec=( ${(@f)"$(__zplug::parser "$line")"} )
        for k in ${(k)zspec}
        do
            # Replace -EMP- with "" empty
            if [[ $zspec[$k] == "-EMP-" ]]; then
                zspec[$k]=""
            fi
        done

        # as: must (default: src)
        if [[ ! $zspec[as] =~ ^(cmd|src)$ ]]; then
            __die "\033[31m[$ZPLUG_NAME] #syntax error# specifier 'as:' takes cmd/src (zplug \"$zspec[name]\")\033[m\n"

            # Remove that key and value
            unset "zplugs[$zspec[name]]"
            # Increments if it fails
            let fail++
        fi

        # from: opt
        if [[ -n $zspec[from] && ! $zspec[from] =~ ^(gh-r)$ ]]; then
            __die "\033[31m[$ZPLUG_NAME] #syntax error# specifier 'from:' takes gh-r (zplug \"$zspec[name]\")\033[m\n"

            # Remove that key and value
            unset "zplugs[$zspec[name]]"
            # Increments if it fails
            let fail++
        fi

        # frozen: must (default: 0)
        if [[ ! $zspec[frozen] =~ ^(0|1)$ ]]; then
            __die "\033[31m[$ZPLUG_NAME] #syntax error# specifier 'frozen:' takes 0/1 (zplug \"$zspec[name]\")\033[m\n"

            # Remove that key and value
            unset "zplugs[$zspec[name]]"
            # Increments if it fails
            let fail++
        fi

        # commit: opt
        if [[ -n $zspec[commit] ]] && (( $#zspec[commit] < 8 )); then
            __die "\033[31m[$ZPLUG_NAME] #syntax error# the length of specifier 'commit:' must be eight characters or more (zplug \"$zspec[name]\")\033[m\n"

            # Remove that key and value
            unset "zplugs[$zspec[name]]"
            # Increments if it fails
            let fail++
        fi
    done

    return $fail
}

__zplug::check()
{
    local line is_verbose=false is_install=false
    local -A zspec
    local -a fail args

    fail=()

    # Process arguments
    while (( $# > 0 ))
    do
        case "$1" in
            --verbose)
                is_verbose=true
                ;;
            --install)
                is_install=true
                ;;
            *)
                args+=("$1")
        esac
        shift
    done

    for line in "${args[@]}"
    do
        zspec=( ${(@f)"$(__zplug::parser "$line")"} )
        if [[ ! -e $zspec[dir] ]]; then
            fail+=("$zspec[name]")
        fi
    done

    # If there are plugins to be installed
    if (( $#fail > 0 )); then
        # Verbose option
        if $is_verbose; then
            __put "- \033[31m%s\033[m: not installed\n" "${(@nO)fail}"
        fi

        # Install option
        if $is_install; then
            __zplug::install "${fail[@]}"
            return $status
        fi
        return 1

    else
        return 0
    fi
}

__zplug::status()
{
    # Local function
    get_head_branch() {
        local head_branch=$(git symbolic-ref -q --short HEAD)
        if [[ -z $head_branch ]]; then
            local prehash=$(git rev-parse --short HEAD)
            echo "$prehash"
            return 1
        fi
        echo "$head_branch"
    }

    # Local function
    get_remote_name() {
        local branch="$1"
        # The remote name of this branch (e.g. origin).
        local remote_name=$(git config branch."${branch}".remote)
        if [[ -z $remote_name ]]; then
            __die "no remote repository\n"
            return 1
        fi
        echo "$remote_name"
    }

    # Local function
    check_remote() {
        local zspec_dir="$1"
        local dir="${zspec_dir##*/}"

        local state
        local branch
        local remote_name
        local merge_branch
        local url

        if [[ ! -e .git ]]; then
            state="not init"
        else
            branch=$(get_head_branch)
            if [[ $status -eq 0 ]]; then
                remote_name=$(get_remote_name "$branch")
                if [[ $status -eq 0 ]]; then
                    merge_branch=$(git config branch."${branch}".merge | sed 's%^refs/heads/%%')
                    local remote_show
                    remote_show=$(git remote show "$remote_name")
                    state=$(echo "$remote_show" \
                        | grep "^ *$branch *pushes" | sed 's/.*(\(.*\)).*/\1/')
                    if [[ -z $state ]]; then
                        local behind_ahead
                        behind_ahead=$(git rev-list --left-right --count "$remote_name/$merge_branch"...$branch)
                        local behind=$(echo "$behind_ahead" | awk '{print $1}')
                        local ahead=$(echo "$behind_ahead" | awk '{print $2}')
                        if [[ $behind -gt 0 ]]; then
                            state="local out of date"
                        else
                            local origin_head
                            origin_head=$(git ls-remote origin HEAD | cut -f 1)
                            if ! git rev-parse -q "$origin_head" >/dev/null 2>&1; then
                                state="local out of date"
                            elif [[ $ahead -gt 0 ]]; then
                                state="fast-forwardable"
                            else
                                state="up to date"
                            fi
                        fi
                    fi
                    url=$(echo "$remote_show" | grep '^ *Push' | sed 's/^.*URL: \(.*\)$/\1/')
                else
                    state="$remote_name"
                    remote_name=
                fi
            else
                state="not on any branch"
            fi
        fi

        state=${state:-'?'}
        if [[ "$state" == "up to date" ]]; then
            state="\033[0;32m${state}\033[0;39m"
        else
            state="\033[0;31m${state}\033[0;39m"
        fi
        dir="\033[0;34m${zspec_dir}\033[0;39m"

        __put "($state) [${dir:-?}] (${branch:-?} -> ${remote_name:-?}/${merge_branch:-?}) URL: ${url:-?}\n"
    }

    # Kill all background jobs
    trap 'kill -9 ${${(v)jobstates##*:*:}%=*} &>/dev/null; set -m; trap - INT' INT

    # Disable job control
    set +m

    local line cnt=0
    for line in ${(k)zplugs}; do
        # Run installation in subprocess
        {
            # All variables are treated as local variable
            # because of background job (subprocess)
            local -A zspec
            zspec=( ${(@f)"$(__zplug::parser "$line")"} )
            builtin cd $zspec[dir] >/dev/null 2>&1
            if [[ $status -ne 0 ]]; then
                __put "(not managed) [\033[34m$zspec[name]\033[m] (grabbing form $zspec[from]) URL: https://github.com/${zspec[name]}.git\n"
                continue
            fi
            check_remote $zspec[name]
        } &

        # Prevent having too many subprocesses
        (( (cnt += 1) % ZPLUG_THREADS == 0 )) && wait
    done

    # Wait until all jobs known to the invoking shell have terminated
    wait

    # Enable job control
    set -m

    # Destory local functions
    unfunction get_remote_name get_head_branch check_remote
}

__zplug::gist_clone()
{
    local head line url_format
    # line="$(sed -e 's|^https://gist\.github\.com/||' <<<"$1")"
    head="gist.github.com/"
    line="$(sed -e 's|^gist\.github\.com/||' <<<"$1")"

    if [[ $ZPLUG_PROTOCOL =~ ^(HTTPS|https)$ ]]; then
        # HTTPS: "https://git::@github.com/%s.git"
        url_format="https://git::@gist.github.com/${line}.git"

        # However, Git 2.3.0 introduced $GIT_TERMINAL_PROMPT
        # which can be used to suppress user prompt
        if (( $(git_version) > 230 )); then
            # HTTPS (git 2.3+): "https://github.com/%s.git"
            GIT_TERMINAL_PROMPT=0
            url_format="https://gist.github.com/${line}.git"
        fi

    elif [[ $ZPLUG_PROTOCOL =~ ^(SSH|ssh)$ ]]; then
        # SSH: "git@github.com:%s.git"
        url_format="git@gist.github.com:${line}.git"

    else
        # OTHER: not supported
        __die "\033[31m x Failed      $line\033[m (use SSH/HTTPS for cloning protocol)\n"
        # Save exit code 2 to ret
        ret=${ret:-2}
    fi

    git clone --quiet "$url_format" "$head$line" >/dev/null 2>&1
}

zplug() {
    local arg
    arg="$1"

    case "$arg" in
        help)
            echo "$ZPLUG_HELP"
            return 0
            ;;

        version)
            echo "$ZPLUG_NAME $ZPLUG_VERSION"
            return 0
            ;;

        status)
            __zplug::status
            return $status
            ;;

        check)
            shift
            __zplug::check "$@" ${(k)zplugs}
            return $status
            ;;

        update)
            shift
            __zplug::update ${@:-${(k)zplugs}}
            return $status
            ;;

        list)
            __zplug::list
            return $status
            ;;

        install)
            shift
            __zplug::install $@ ${(k)zplugs}
            return $status
            ;;

        load)
            __zplug::load
            return $status
            ;;

        "")
            return 1
            ;;

        *)
            local -a args
            args=("${(s:,:)$(sed -e 's/, */,/g' <<<"$@")}")
            arg="${args[1]}"
            args[1]=()
            arg="$(sed -e 's|^https://||' <<<"$arg")"

            if [[ $arg =~ ^(gist\.github\.com/)?[A-Za-z0-9._-]+/[A-Za-z0-9._-]+$ ]]; then
                local cnt=0 dep stdin
                local -a task dep_args
                task=("$arg")

                if [[ -p /dev/stdin ]]; then
                    stdin="$(cat <&0)"
                    dep="${stdin%%:*}"
                    task=("$dep" "$arg")
                    dep_args=("${stdin#*:}")
                    let cnt++
                fi
                if [[ -p /dev/stdout ]]; then
                    echo "$arg:$@"
                    let cnt++
                fi
                if (( cnt >= 2 )); then
                    __die "$dep: not install (zplug 3 pipeline)\n"
                    return 1
                fi

                local i specifier
                for arg in "${task[@]}"
                do
                    # if [[ $arg == $dep ]]; then
                    #     args=("${(s:, :)dep_args}")
                    # else
                    #     args=("$@")
                    # fi

                    for i in $args
                    do
                        case "${i%%:*}" in
                            as|of|from|to|if|dir|file|at|do|frozen|on|commit)
                                specifier="${specifier}${i%,},"
                                ;;
                            *)
                                __die "$i: invalid specifier\n"
                                return 1
                                ;;
                        esac
                    done

                    specifier="${specifier%,}"
                    # Add to $zplugs(AA; key:"user/repo" => value:"specifier:value")
                    zplugs+=("$arg" "${specifier:-}")
                    # Add dir specifier to $zplugs
                    zplugs[$arg]+="${zplugs[$arg]:+,}dir:$ZPLUG_HOME/repos/$arg"
                    if [[ $arg != $dep && -n $dep ]]; then
                        zplugs[$arg]+="${zplugs[$arg]:+,}on:$dep"
                    fi
                    specifier=""
                done
            else
                __die "$arg: no such command\n"
                return 1
            fi
            ;;
    esac

    # Check syntax error
    __zplug::validator || return $status
}

_zplug()
{
    local curcontext="$curcontext" state line ret=1

    _arguments -C \
        '1: :->cmds' \
        '*:: :->args' && ret=0

    case $state in
        cmds)
            _values "zplug commands" \
                "install[Install described items (plugins/commands) in parallel]" \
                "load[Load installed items]" \
                "update[Update items in parallel]" \
                "check[Check whether an update or installation is available]" \
                "list[Show all of the zplugs in the current shell]" \
                "status[Check if remote branch is up-to-date]" \
                "version[Show version information]" \
                "help[Show help message and usage]"
            ret=0
            ;;
        args)
            case $line[1] in
                check)
                    _arguments \
                        '(--verbose)--verbose[show non-installed items in output]' \
                        '(--install)--install[install items if there are items that are not installed yet]' \
                        '*:: :_files -W $ZPLUG_HOME/repos'
                    ret=0
                    ;;
                update)
                    _arguments \
                        '(- 1 *)--self[update zplug by itself]' \
                        '*:: :_files -W $ZPLUG_HOME/repos'
                    ret=0
                    ;;
                install)
                    _arguments \
                        '(--verbose)--verbose[show non-installed items in output]' \
                        '*:: :compadd -x "%F{green}Accept%f %Busername/reponame%b arguments"'
                    ret=0
                    ;;
                list|status|load|version|help)
                    compadd -x "%F{yellow}Completing%f %Bno arguments%b"
                    ret=0
                    ;;
                */*)
                    _values -S : -s , "zplug specifiers" \
                        "as[Regard that as plugins or commands]:as:(src cmd)" \
                        "of[Specify the pattern to source (for src) or relative path to export (for cmd)]:of:" \
                        "from[Grab external binaries from e.g., GitHub Releases]:from:(gh-r)" \
                        "at[Support branch/tag installation]:at:" \
                        "file[Specify filename you want to rename]:file:" \
                        "dir[Installation directory (RO)]:dir:" \
                        "if[Whether to install or not]:if:" \
                        "do[Run commands after installation]:do:" \
                        "frozen[Do not update unless explicitly specified]:frozen:(0 1)" \
                        "commit[Support commit installation]:commit:" \
                        "on[Dependencies (RO)]:on:"
                    ret=0
                    ;;
            esac
            ;;
    esac

    return ret
}

if (( ! $+commands[git] )); then
    unfunction \
        __die \
        __put \
        git_version \
        bg_rotation_bar \
        __zplug::list \
        __zplug::self_update \
        __zplug::update \
        __zplug::install \
        __zplug::parser \
        __zplug::load \
        __zplug::validator \
        __zplug::check \
        __zplug::status \
        get_head_branch \
        get_remote_name \
        check_remote \
        __zplug::gist_clone \
        zplug \
        _zplug
fi

if (( ! $+functions[compdef] )); then
    autoload -Uz compinit
    compinit
fi
compdef _zplug zplug

# __END__ {{{1
# vim:fdm=marker fdc=3 ft=zsh ts=4 sw=4 sts=4:
