#!/bin/zsh
#              _             
#    _____ __ | |_   _  __ _ 
#   |_  / '_ \| | | | |/ _` |
#    / /| |_) | | |_| | (_| |
#   /___| .__/|_|\__,_|\__, |
#       |_|            |___/ 
#
#  zplug: zsh plugin manager
# ===========================
#
# Download zplug and put it in ~/.zplug
#
#   curl -fLo ~/.zplug/zplug --create-dirs \
#     https://raw.githubusercontent.com/b4b4r07/zplug/master/zplug
#
# Edit your .zshrc
#

: <<'EXAMPLE'
source ~/.zplug/zplug

# Make sure you use double quotes
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-substring-search"

# shell commands
zplug "holman/spark", as:cmd
# shell commands (specify export directory path using `of` specifier)
zplug "b4b4r07/http_code", as:cmd, of:bin
# shell commands (whatever language is OK; e.g., perl script)
zplug "k4rthik/git-cal", as:cmd

# binaries (from GitHub Releases)
zplug "junegunn/fzf-bin", \
    as:cmd, \
    from:gh-r, \
    file:fzf

# branch/tag
zplug "b4b4r07/enhancd", at:v1

# true or false
zplug "hchbaw/opp.zsh", if:"[ ${ZSH_VERSION%%.*} -lt 5 ]"

# Group dependencies, emoji-cli depends on jq
zplug "stedolan/jq", \
    as:bin, \
    file:jq, \
    from:gh-r \
    | zplug "b4b4r07/emoji-cli"

# source plugins and add commands to $PATH
zplug load

EXAMPLE
#
# Then reload .zshrc and `zplug install; zplug load` to install plugins.
# Visit https://github.com/b4b4r07/zplug for more information.
#
# The MIT License (MIT)
# Copyright © 2015 Masaki Ishiyama <b4b4r07@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# environment variable (read-only)
typeset -gx ZPLUG_NAME=zplug
typeset -gx ZPLUG_VERSION=0.1.0
typeset -gx ZPLUG_RAWURL="https://raw.githubusercontent.com/b4b4r07/zplug/master/zplug"
typeset -gx ZPLUG_URL="https://github.com/b4b4r07/zplug"

# set default value if not present
typeset -gx ZPLUG_HOME=${ZPLUG_HOME:-~/zplug/repos}
typeset -gx ZPLUG_THREAD=${ZPLUG_THREAD:-16}

# global variable
typeset -g -A zplugs

usage="$(cat <<HELP
usage: $ZPLUG_NAME [command] [specifier:value]...
  $ZPLUG_NAME is next-generation zsh plugin manager

commands:
  help       show this help message
  version    show version
  install    install described plugins
  update     update plugins
  list       show installed plugins
  load       load plugins

specifiers:
  name    Consist of username/reponame [RO]
  as      Regard that as plugins or commands
  of      Specify the pattern to source (for src)
          or relative path to export (for cmd)
  to      - not yet supported -
  from    Grab external binaries from e.g., GitHub Releases
  if      Whether to install or not
  dir     Installation directory [RO]
  file    Specify filename you want to rename
  at      Support branch/tag installation
  do      Run commands after installation
  frozen  Do not update unless explicitly specified

For more information, see also $ZPLUG_URL
HELP
)"

die() {
    echo "$@" >&2
}

bg_rotation_bar() {
    local current_count simbol
    for ((current_count=0; ; current_count++))
    do
        let simbol=current_count%4
        case "$simbol" in
            0) echo -ne " |\r";;
            1) echo -ne " /\r";;
            2) echo -ne " -\r";;
            3) echo -ne " \\\\\r";;
        esac
        sleep 0.05s
    done
}

__zplug::list()
{
    if (($#zplugs < 1)); then
        die "$ZPLUG_NAME: there is no available plugins"
        return 1
    fi
    local v
    local -A B
    for v in "${(@nO)zplugs}"; do
        B+=("${(@kv)zplugs[(eR)$v]}")
    done
    command printf '%-20s  =>  %s\n' "${(@kv)B}" \
        | sed -e 's/-EMP-/""/g' \
        | perl -pe 's/^(.*)( *=>.*)$/\033[32m$1\033[m$2/g' \
        | perl -pe 's/(as|of|from|to|if|dir|file|at|do|frozen)(:)/\033[34m$1\033[m$2/g'
}

__zplug::selfupdate()
{
    curl -fLo $ZPLUG_HOME/zplug --create-dirs $ZPLUG_RAWURL >/dev/null 2>&1
    if [[ $status -eq 0 ]]; then
        printf "\033[32mUpdated $ZPLUG_NAME ($ZPLUG_HOME/zplug)\033[m\n"
    else
        printf "\033[31mError occured (see $ZPLUG_URL)\033[m\n"
        return 1
    fi
}

__zplug::update()
{
    # Disable job control
    set +m

    # Process argments
    case "$1" in
        --self)
            __zplug::selfupdate; return $status
            ;;
    esac

    local cnt line
    cnt=0

    for line in "$@"; do
        # Run installation in subprocess
        {
            # All variables are treated as local variable
            # because of background job (subprocess)
            local -A zspec
            zspec=( ${(@f)"$(__zplug::parser "$line")"} )
            for k in ${(k)zspec}
            do
                if [[ $zspec[$k] == "-EMP-" ]]; then
                    zspec[$k]=""
                fi
            done

            # Reset timer
            typeset -F SECONDS=0

            if [[ $zspec[frozen] -eq 1 ]]; then
                command printf " \033[34m* Frozen\033[m    $line\n"
                continue
            fi

            command printf "Updating...  $line\n"
            bg_rotation_bar & bg_pid=$!
            () {
                cd $zspec[dir] || cd ${zspec[dir]%/*} || return 2
                if [[ $zspec[from] == "gh-r" ]]; then
                    eval 'L=$zspec[name] bash -c "$(curl -L git.io/releases)" -s os'
                else
                    git pull --quiet
                fi || return 1
            } >/dev/null 2>&1
            ret=$status

            # Kill bg_rotation_bar animation
            kill -9 $bg_pid

            case $ret in
                0)
                    command printf "\033[32mUpdated!\033[m     %-20s\t(%.2fs)\n" "$line" $SECONDS
                    ;;
                1)
                    command printf "\033[31mNot Updated\033[m  %-20s\t(%.2fs)\n" "$line" $SECONDS
                    ;;
                2)
                    sleep 1
                    command printf "\033[35mNot Found\033[m    %-20s\t(%.2fs)\n" "$line" $((SECONDS-1))
                    ;;
            esac
        } &
        # Prevent having too many subprocesses
        (( (cnt += 1) % ZPLUG_THREAD == 0 )) && wait
    done
    wait
    set -m
}

__zplug::install()
{
    # Disable job control
    set +m

    local cnt line fail job
    local start end
    cnt=0
    [[ -d $ZPLUG_HOME ]] || mkdir -p $ZPLUG_HOME
    [[ -n $1 ]] || return

    start="$(date +%s)"
    for line in "$@"; do
        # Skip installed items
        [[ -e $ZPLUG_HOME/$line ]] &&
            {
                command printf "\033[31m-\033[m \033[32m${line}\033[m: already installed\n"
                continue
            }

        # Run installation in subprocess
        {
            # All variables are treated as local variable
            # because of background job (subprocess)
            local -A zspec
            zspec=( ${(@f)"$(__zplug::parser "$line")"} )
            for k in ${(k)zspec}
            do
                if [[ $zspec[$k] == "-EMP-" ]]; then
                    zspec[$k]=""
                fi
            done

            # Reset timer
            typeset -F SECONDS=0

            command printf "Installing...  $line\n"
            bg_rotation_bar & bg_pid=$!
            cd $ZPLUG_HOME

            # Download
            if [[ $zspec[from] == "gh-r" ]]; then

                # from GitHub Releases
                [[ -d ${zspec[name]%/*} ]] || mkdir -p "${zspec[name]%/*}"
                cd "${zspec[name]%/*}"
                eval 'L=$zspec[name] bash -c "$(curl -L git.io/releases)" -s os' >/dev/null 2>&1
                ret=$status

            else
                # from GitHub
                git clone \
                    --depth=1 \
                    --recursive \
                    --quiet \
                    --branch $zspec[at] \
                    git@github.com:"$line" "$line" >/dev/null 2>&1
                ret=$status
            fi

            # If not empty
            if [[ -n $zspec[do] ]]; then
                if [[ $ret -eq 0 ]]; then
                    # Run command
                    eval "$zspec[do]"
                fi
            fi

            # Kill bg_rotation_bar animation
            kill -9 $bg_pid

            # Whether to success or not
            if [ $ret -eq 0 ]; then
                command printf "\033[32mInstalled!\033[m     %-20s\t(%.2fs)\n" "$line" $SECONDS
            else
                command printf "\033[31mNot Installed\033[m  %-20s\t(%.2fs)\n" "$line" $SECONDS
                false
            fi
        } &

        # Prevent having too many subprocesses
        (( (cnt += 1) % ZPLUG_THREAD == 0 )) && wait
    done

    # Count if fail
    fail=0

    # Pauses until execution of a background process has ended
    for job in ${${(v)jobstates##*:*:}%=*}
    do
        wait $job || let "fail+=1"
    done
    # Wait until all jobs known to the invoking shell have terminated
    wait
    set -m

    # Skip footer prints if noting to do
    if [[ $cnt -eq 0 ]]; then
        return
    fi

    # Footer prints
    if [[ $fail -eq 0 ]]; then
        command printf "\033[;1m ==> Installed all plugins to $ZPLUG_HOME, successfully!\033[m\n"
    else
        command printf "\033[31;1m ==> Installed to $ZPLUG_HOME but failed.\033[m\n"
    fi

    end="$(date +%s)"
    command printf "$ZPLUG_NAME: total time %d sec\n" $(($end - $start))
}

__zplug::parser()
{
    local zplug split_array
    zplug="$1"
    zplug="${zplug},${zplugs[$zplug]%,}"

    # Split by comma
    split_array=(${(s:,:)zplug})

    # Add spec variable
    # If value is empty, set -EMP- value to it
    local name as of to from if dir file at do frozen
    name="${split_array[1]}"
    as=${${${(M)split_array:#as*}#*:}:-src}
    of=${${${(M)split_array:#of*}#*:}:--EMP-}
    to=${${${(M)split_array:#to*}#*:}:--EMP-}
    from=${${${(M)split_array:#from*}#*:}:--EMP-}
    if=${${${(M)split_array:#if*}#*:}:--EMP-}
    dir=${${${(M)split_array:#dir*}#*:}:--EMP-}
    file=${${${(M)split_array:#file*}#*:}:--EMP-}
    at=${${${(M)split_array:#at*}#*:}:-master}
    do=${${${(M)split_array:#do*}#*:}:--EMP-}
    frozen=${${${(M)split_array:#frozen*}#*:}:-0}

    local -A zplugs_parsed
    zplugs_parsed=(
      name    "$name"
      as      "$as"
      of      "$of"
      to      "$to"
      from    "$from"
      if      "$if"
      dir     "$dir"
      file    "$file"
      at      "$at"
      do      "$do"
      frozen  "$frozen"
    )

    local k
    for k in ${(k)zplugs_parsed}
    do
        echo "$k"
        echo "$zplugs_parsed[$k]"
    done
}

__zplug::load()
{
    local f files k
    local zplug
    local -A zspec

    for zplug in ${(k)zplugs}
    do
        # Set zspec
        zspec=( ${(@f)"$(__zplug::parser "$zplug")"} )
        # Replace -EMP- with ""(empty)
        for k in ${(k)zspec}
        do
            if [[ $zspec[$k] == "-EMP-" ]]; then
                zspec[$k]=""
            fi
        done

        # If not empty
        if [[ -n $zspec[if] ]]; then
            # Check if $spec[if] is true
            if ! eval '$zspec[if]' >/dev/null 2>&1; then
                die "$zspec[name]: (not load)"
                continue
            fi
        fi

        # Branch cmd/src
        case $zspec[as] in
            cmd)
                files=()
                mkdir -p ${ZPLUG_HOME%/*}/bin 2>/dev/null

                # Search binary/command file
                if [[ -f $zspec[dir]/${zspec[name]#*/} ]]; then
                    files=("$zspec[dir]/${zspec[name]#*/}")
                elif [[ -f $zspec[dir]/$zspec[of] ]]; then
                    files+=("$zspec[dir]/$zspec[of]")
                elif [[ -f $zspec[dir]/$zspec[of]/${zspec[name]#*/} ]]; then
                    files+=("$zspec[dir]/$zspec[of]/${zspec[name]#*/}")
                elif [[ -f $zspec[dir] ]]; then
                    files+=("$zspec[dir]")
                fi

                # Make symlink to $ZPLUG_HOME/bin exported in parallel
                for f in "$files[@]"
                do
                    {
                        # Support commit sha
                        # local pat
                        # pat="^($(git branch | cut -c3- | paste -s -d"|" -))$"
                        # if [[ ! $zspec[at] =~ $pat ]]; then
                        #     cd $zspec[dir]
                        #     git checkout $zspec[at]
                        # fi
                        cd ${ZPLUG_HOME%/*}/bin
                        ln -snf "$f" ${zspec[file]:-.}
                    } &
                done
                wait

                # Export
                path=(${ZPLUG_HOME%/*}/bin $path)
                typeset -gx -U path
                ;;

            src)
                # Search plugin files by pattern
                files=($(zsh -c "echo $zspec[dir]/${zspec[of]:-*.sh(N)}" 2>/dev/null))
                for f in $files
                do
                    source "$f"
                done
                ;;
        esac
    done
}

zplug() {
    local arg
    arg="$1"

    case "$arg" in
        help)
            echo "$usage"
            return
            ;;

        version)
            echo "$ZPLUG_VERSION"
            return
            ;;

        update)
            shift
            __zplug::update "$@" ${(k)zplugs}
            return $status
            ;;

        list)
            __zplug::list
            return $status
            ;;

        install)
            __zplug::install ${(k)zplugs}
            return $status
            ;;

        load)
            __zplug::load
            return $status
            ;;

        "")
            return 1
            ;;

        *)
            shift # Shift "username/reponame",
            # $arg consists of "username/reponame", specifier:value, ...
            if [[ $arg =~ ^[A-Za-z0-9._-]+/[A-Za-z0-9._-]+,?$ ]]; then
                local i specifier
                for i in "$@"
                do
                    case "${i%:*}" in
                        as|of|from|to|if|dir|file|at|do|frozen)
                            specifier="${specifier}${i}"
                            ;;
                        *)
                            die "$i: invalid specifier"
                            return 1
                            ;;
                    esac
                done

                # Trim last comma
                arg=${arg%,}
                specifier=${specifier%,}
                # Add to $zplugs(AA; key:"user/repo" => value:"specifier:value")
                zplugs+=($arg "${specifier:-}")
                # Add dir specifier to $zplugs
                zplugs[$arg]+="${zplugs[$arg]:+,}dir:$ZPLUG_HOME/$arg"

                # Initialize all specifiers
                local zplug
                for zplug in ${(k)zplugs}
                do
                    zplugs[$zplug]="$(
                    () {
                        local -A zspec
                        local k cnt=0
                        zspec=( ${(@f)"$(__zplug::parser "$zplug")"} )
                        for k in ${(k)zspec}
                        do
                            printf "$k:$zspec[$k],"
                        done
                        echo
                    } | sed -e 's/,$//'
                    )"
                done
            fi
            ;;
    esac
}

# __END__ {{{1
# vim:fdm=marker fdc=3 ft=zsh ts=4 sw=4 sts=4:
